C:\Users\carrvo\Documents\Programming Development\Ongoing\TimeValueLib\Source>python3
Python 3.6.0 (v3.6.0:41df79263a11, Dec 23 2016, 08:06:12) [MSC v.1900 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> from TimeValueLib import TimeValue,Interest
>>> help(Interest)
Help on class Interest in module TimeValueLib.Interest:

class Interest(builtins.object)
 |  Class for representing interest (compounded or not).
 |
 |  Specifically objects of this class use an interest rate to calculate
 |      value conversions through time. This conversion is needed for
 |      comparing between the value of the money on hand (including its
 |      opportunity) with the value of the money once the lender has paid
 |      back the loan (including the interest). This means that the value
 |      of the money (the amount) on hand is treated as equivalent to the
 |      amount loaned plus the interest (as the interest is only there to
 |      compensate for opportunity and not add to the value of the money).
 |
 |  Methods defined here:
 |
 |  __init__(self, rate, period, subperiod=None)
 |      Initializes.
 |
 |      @Params:
 |          - rate: interest rate (nominal rate -- full period)
 |          - period: interest period; length of time between interest payments
 |          - subperiod: number of compoundings within a period
 |
 |  __pow__(self, deltaperiods)
 |      Magic Method for implementing the exponential/power (**) operator.
 |      Specifically the behaviour is a short-cut for self.convert for user-friendly usage.
 |
 |  __rdiv__(self, timevalue)
 |      TEMPORARILY: a single divide represents a single period jump backward in time.
 |
 |  __rmul__(self, timevalue)
 |      TEMPORARILY: a single multiply represents a single period jump forward in time.
 |
 |  __str__(self)
 |      Magic Method that returns a user-friendly representation of the object.
 |
 |  convert(self, deltaperiods)
 |      Calculates a ratio that converts any value across a change (delta) in time.
 |          This time-conversion calculation is independent of when the start
 |          and finish of any conversion is.
 |
 |      WARNING: Use of this method directly with TimeValue causes integrity
 |          issues as it does not modify the TimeValue time so the "conversion"
 |          would simply change the value at the time it would originally be at.
 |          This means that its value relative to its time would change (impossible)
 |          and you would be gaining or losing time-value amounts instead of
 |          comparing the same time-value amount across times with different values.
 |
 |      @Params:
 |          - deltaperiods: the change (delta) in time to convert through
 |
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |
 |  __dict__
 |      dictionary for instance variables (if defined)
 |
 |  __weakref__
 |      list of weak references to the object (if defined)

>>>
>>> help(TimeValue)
Help on class TimeValue in module TimeValueLib.TimeValue:

class TimeValue(builtins.object)
 |  Class for representing the time-value property of money (monetary).
 |
 |  Specifically objects of this class will always hold the relative P.
 |      This is "relative P" instead of just "P" because it recognizes
 |      that you can make many time conversions of money and so what
 |      consitutes "P" changes relative to the time it corresponds to.
 |      Thus this class treats the "value" as being the P relative to
 |      the object's concept of time. The object's concept of time is
 |      that of the Economical time and not the object's life.
 |
 |  Furthermore, this class recognizes that the conversion backward in time
 |      (where you would treat the "current" as being the "F" and the past
 |      as being the "P") is the inverse of the conversion forward in time.
 |      This view of converting backward in time also can be understood as
 |      converting forward through negative time. Thus it makes no distinction
 |      between P and F but rather treating both as being a value (P) relative
 |      to its corresponding time. This makes both P and F become instances of
 |      the same class where they will be treated as equivalent.
 |
 |  Methods defined here:
 |
 |  __add__(self, other)
 |      Magic Method for implementing the addition (+) operator.
 |      Specifically the behaviour is to combine the values of
 |          this class's objects together when their times correlate.
 |
 |      @Params:
 |          - other: the object that will be interacted with
 |
 |  __copy__(self)
 |      Magic Method for the Shallow Copy Operation.
 |      Since this is a simple class this method functions as a deep copy.
 |
 |  __div__ = _TVdivI(self, interest)
 |      TEMPORARILY: a single divide represents a single period jump backward in time.
 |
 |  __init__(self, value, date)
 |      Initializes.
 |
 |      @Params:
 |          - value: monetary ($)
 |          - date
 |
 |  __mul__ = _TVmulI(self, interest)
 |      TEMPORARILY: a single multiply represents a single period jump forward in time.
 |
 |  __rmul__ = _TVmulI(self, interest)
 |      TEMPORARILY: a single multiply represents a single period jump forward in time.
 |
 |  __str__(self)
 |      Magic Method that returns a user-friendly representation of the object.
 |
 |  __sub__(self, other)
 |      Magic Method for implementing the subtraction (-) operator.
 |      Specifically the behaviour is to combine the values of
 |          this class's objects together when their times correlate.
 |
 |      @Params:
 |          - other: the object that will be interacted with
 |
 |  __validate__(self, other)
 |      Provides an eazy reuse of code for operations
 |          that limit the "other" type they interact with.
 |
 |      @Params:
 |          - other: the object that will be interacted with
 |
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |
 |  __dict__
 |      dictionary for instance variables (if defined)
 |
 |  __weakref__
 |      list of weak references to the object (if defined)
 |
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |
 |  dateformat = '%d/%m/%Y'

>>>
>>>
>>> help(Interest.__init__)
Help on function __init__ in module TimeValueLib.Interest:

__init__(self, rate, period, subperiod=None)
    Initializes.

    @Params:
        - rate: interest rate (nominal rate -- full period)
        - period: interest period; length of time between interest payments
        - subperiod: number of compoundings within a period

>>> firstyear = Interest(rate=0.1, period=365) # 10% for 1 year
>>> secondyear = Interest(0.2, 365, 12) # 20% for 1 year compounded monthly
>>> start = TimeValue(500, '01/01/0001') # $500 day 1 of month 1 of year 1
>>> firstpayment = TimeValue(-100, '01/01/0002') # pay $100 year 2
>>> firstearning = TimeValue(50, '01/01/0002') # earn $50 year 2
>>> secondpayment = TimeValue(-100, '01/01/0003') # pay $100 year 3
>>> secondearning = TimeValue(50, '01/01/0003') # earn $50 year 3
>>> start + firstpayment # cannot add when different dates
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "C:\Users\carrvo\Documents\Programming Development\Ongoing\TimeValueLib\Source\TimeValueLib\TimeValue.py", line 105, in __add__
    self.__validate__(other)
  File "C:\Users\carrvo\Documents\Programming Development\Ongoing\TimeValueLib\Source\TimeValueLib\TimeValue.py", line 91, in __validate__
    raise ValueError('Must have the same date!')
ValueError: Must have the same date!
>>> firstyear * start + firstpayment # convert using interest then add
<TimeValueLib.TimeValue.TimeValue object at 0x0000025D744842E8>
>>> print(firstyear * start + firstpayment) # print object to screen
Value: 450.0 @ 01/01/0002
>>> print(firstyear * start) # conversion using interest
Value: 550.0 @ 01/01/0002
>>> print(firstyear * start + firstpayment + firstearning) # many additions
Value: 500.0 @ 01/01/0002
>>> firstamount = firstyear * start + firstpayment + firstearning # store conversion in new variable
>>> print(firstamount) # confirm storage
Value: 500.0 @ 01/01/0002
>>> secondamount = secondyear * firstamount + secondpayment + secondearning # store conversion
>>> print(secondamount) # confirm storage
Value: 559.6955424526158 @ 01/01/0003
>>> print(5 * secondamount) # multiplicable with scalars
Value: 2798.477712263079 @ 01/01/0003
>>> print(secondamount * 5) # order does not matter
Value: 2798.477712263079 @ 01/01/0003
>>> secondamount = firstamount * secondyear + secondpayment + secondearning # order does not matter for interest either
>>> print(secondamount)
Value: 559.6955424526158 @ 01/01/0003
>>> secondamount = firstamount * secondyear + secondpayment - secondearning # subtractable too
>>> print(secondamount)
Value: 459.69554245261577 @ 01/01/0003
>>> print(secondyear) # print object to screen
Interest Rate: 0.2
Interest Period: 365 days, 0:00:00
Subperiods: 12
>>> print(secondyear ** 1) # ratio for 1 year ahead (supports negatives for backward)
1.2193910849052316
>>> print(secondyear ** 10) # ratio for 10 years ahead
7.26825499216019
>>> print(secondpayment / secondyear)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: unsupported operand type(s) for /: 'TimeValue' and 'Interest'
>>> print(secondyear / secondpayment)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: unsupported operand type(s) for /: 'Interest' and 'TimeValue'
>>> print(secondpayment / secondearning)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: unsupported operand type(s) for /: 'TimeValue' and 'TimeValue'
>>> print(secondpayment / 5)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: unsupported operand type(s) for /: 'TimeValue' and 'int'
>>> #supposed to support division...
...
>>> print(secondpayment * 5)
Value: -500.0 @ 01/01/0003
>>> print(secondpayment * secondearning) # support multiplication
Value: -5000.0 @ 01/01/0003
>>> print(firstearning * firstyear)
Value: 55.00000000000001 @ 01/01/0003
>>> print(firstyear * firstearning) # order does not matter
Value: 55.00000000000001 @ 01/01/0003
>>> print(firstearning * secondearning) # multiplication must also have same date
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "C:\Users\carrvo\Documents\Programming Development\Ongoing\TimeValueLib\Source\TimeValueLib\Interest.py", line 139, in _TVmulI
    return _originalTVmul(self, interest)
  File "C:\Users\carrvo\Documents\Programming Development\Ongoing\TimeValueLib\Source\TimeValueLib\TimeValue.py", line 134, in __mul__
    self.__validate__(other)
  File "C:\Users\carrvo\Documents\Programming Development\Ongoing\TimeValueLib\Source\TimeValueLib\TimeValue.py", line 91, in __validate__
    raise ValueError('Must have the same date!')
ValueError: Must have the same date!
>>> print(firstearning * firstyear * secondearning) # convert and multiply
Value: 2750.0000000000005 @ 01/01/0003
>>> print(firstearning * firstyear + secondearning) # convert and add
Value: 105.0 @ 01/01/0003
>>> print((firstearning * firstyear + secondearning) * secondyear) # convert and add then convert again
Value: 128.0360639150493 @ 01/01/0004
>>> exit()
